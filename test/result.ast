Root(
    types={
        TestType=DefinedType(
            name=TestType,
            variables=[
                DefinedVariable(
                    name=a,
                    type=I32,
                    default=null
                ),
                DefinedVariable(
                    name=b,
                    type=I32,
                    default=null
                )
            ]
        )
    },
    globals={
        max=DefinedVariable(
            name=max,
            type=I32,
            default=BinaryExpression(
                left=LiteralExpression( value=10 ),
                op=ADD,
                right=LiteralExpression( value=5 )
            )
        )
    },
    functions={
        add=DefinedFunction(
            name=add,
            returnType=I32,
            parameters=[
                DefinedVariable(
                    name=numbers,
                    type=DefinedTypeRef( name=TestType ),
                    default=null
                )
            ],
            body=Block(
                statements=[
                    ReturnStatement(
                        expr=BinaryExpression(
                            left=NamedExpression(
                                name=Identifier(
                                    name=numbers,
                                    selector=Identifier(
                                        name=a,
                                        selector=null
                                    )
                                )
                            ),
                            op=ADD,
                            right=NamedExpression(
                                name=Identifier(
                                    name=numbers,
                                    selector=Identifier(
                                        name=b,
                                        selector=null
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ),
        testLoops=DefinedFunction(
            name=testLoops,
            returnType=U1,
            parameters=[ ],
            body=Block(
                statements=[
                    VarDefStatement(
                        variable=DefinedVariable(
                            name=num,
                            type=I32,
                            default=LiteralExpression( value=2 )
                        )
                    ),
                    ForStatement(
                        variable=DefinedVariable(
                            name=i,
                            type=I32,
                            default=LiteralExpression( value=1 )
                        ),
                        condition=BinaryExpression(
                            left=NamedExpression(
                                name=Identifier(
                                    name=i,
                                    selector=null
                                )
                            ),
                            op=LOW,
                            right=NamedExpression(
                                name=Identifier(
                                    name=max,
                                    selector=null
                                )
                            )
                        ),
                        operation=InverseUnaryExpression(
                            left=NamedExpression(
                                name=Identifier(
                                    name=i,
                                    selector=null
                                )
                            ),
                            op=AAD
                        ),
                        body=Block(
                            statements=[
                                AssignStatement(
                                    id=Identifier(
                                        name=num,
                                        selector=null
                                    ),
                                    parseExpression=BinaryExpression(
                                        left=ConstructExpression(
                                            name=Identifier(
                                                name=TestType,
                                                selector=null
                                            ),
                                            params=[
                                                NamedExpression(
                                                    name=Identifier(
                                                        name=i,
                                                        selector=null
                                                    )
                                                ),
                                                NamedExpression(
                                                    name=Identifier(
                                                        name=num,
                                                        selector=null
                                                    )
                                                )
                                            ]
                                        ),
                                        op=ACC,
                                        right=CallExpression(
                                            func=NamedExpression(
                                                name=Identifier(
                                                    name=add,
                                                    selector=null
                                                )
                                            ),
                                            params=[ ]
                                        )
                                    )
                                )
                            ]
                        )
                    ),
                    WhileStatement(
                        condition=NamedExpression(
                            name=Identifier(
                                name=cond,
                                selector=null
                            )
                        ),
                        body=Block( statements=[ ] )
                    ),
                    DoWhileStatement(
                        condition=NamedExpression(
                            name=Identifier(
                                name=cond,
                                selector=null
                            )
                        ),
                        body=Block( statements=[ ] )
                    ),
                    ReturnStatement(
                        expr=CallExpression(
                            func=NamedExpression(
                                name=Identifier(
                                    name=testConditions,
                                    selector=null
                                )
                            ),
                            params=[
                                NamedExpression(
                                    name=Identifier(
                                        name=num,
                                        selector=null
                                    )
                                )
                            ]
                        )
                    )
                ]
            )
        ),
        testConditions=DefinedFunction(
            name=testConditions,
            returnType=U1,
            parameters=[
                DefinedVariable(
                    name=number,
                    type=I32,
                    default=null
                )
            ],
            body=Block(
                statements=[
                    IfStatement(
                        condition=BinaryExpression(
                            left=NamedExpression(
                                name=Identifier(
                                    name=number,
                                    selector=null
                                )
                            ),
                            op=EQ,
                            right=LiteralExpression( value=0 )
                        ),
                        body=Block(
                            statements=[
                                ReturnStatement(
                                    expr=LiteralExpression( value=1 )
                                )
                            ]
                        ),
                        next=IfStatement(
                            condition=BinaryExpression(
                                left=NamedExpression(
                                    name=Identifier(
                                        name=number,
                                        selector=null
                                    )
                                ),
                                op=EQ,
                                right=LiteralExpression( value=1 )
                            ),
                             body=Block(
                                statements=[
                                    ReturnStatement(
                                        expr=LiteralExpression( value=1 )
                                    )
                                ]
                            ),
                            next=ElseStatement(
                                body=Block(
                                    statements=[
                                        ReturnStatement(
                                            expr=LiteralExpression( value=0 )
                                        )
                                    ]
                                )
                            )
                        )
                    )
                ]
            )
        )
    }
)
